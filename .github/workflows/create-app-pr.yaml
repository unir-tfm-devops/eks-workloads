name: "Create Application PR"
on:
  issues:
    types: [opened, reopened]

jobs:
  extract_info:
    name: Extract Issue Information
    if: contains(github.event.issue.labels.*.name, 'new-app')
    runs-on: ubuntu-latest
    outputs:
      application-name: ${{ steps.extract_info.outputs.APPLICATION_NAME }}
      repository-name: ${{ steps.extract_info.outputs.REPOSITORY_NAME }}
      environment: ${{ steps.extract_info.outputs.ENVIRONMENT }}
      helm-chart-name: ${{ steps.extract_info.outputs.HELM_CHART_NAME }}
      helm-path: ${{ steps.extract_info.outputs.HELM_PATH }}
      app-version: ${{ steps.extract_info.outputs.APP_VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Parse Issue Body
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "$ISSUE_BODY" > issue_body.md
          python scripts/extract-app-info.py issue_body.md

      - name: Extract Repo Information
        id: extract_info
        run: |
          echo "APPLICATION_NAME=$(grep 'Application Name:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "REPOSITORY_NAME=$(grep 'Repository Name:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "HELM_CHART_NAME=$(grep 'Helm Chart Name:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "HELM_PATH=$(grep 'Helm Path:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "APP_VERSION=$(grep 'Application Version:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=$(grep 'Environment:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT

      - name: Print Extracted Information
        run: |
          echo "Application Name: ${{ steps.extract_info.outputs.APPLICATION_NAME }}"
          echo "Repository Name: ${{ steps.extract_info.outputs.REPOSITORY_NAME }}"
          echo "Helm Chart Name: ${{ steps.extract_info.outputs.HELM_CHART_NAME }}"
          echo "Helm Path: ${{ steps.extract_info.outputs.HELM_PATH }}"
          echo "Application Version: ${{ steps.extract_info.outputs.APP_VERSION }}"
          echo "Environment: ${{ steps.extract_info.outputs.ENVIRONMENT }}"

  argo-changes:
    name: ArgoCD App Changes
    needs: [extract_info]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.UNIR_TFM_APP_ID }}
          private-key: ${{ secrets.UNIR_TFM_APP_PRIVATE_KEY }}
          repositories: "eks-workloads"

      - name: Modify values.yaml for Environment
        run: |
          # Generate the application name for the environment
          APP_NAME="${{ needs.extract_info.outputs.application-name }}-${{ needs.extract_info.outputs.environment }}"
          ENV="${{ needs.extract_info.outputs.environment }}"
          NAMESPACE="${{ needs.extract_info.outputs.environment }}"

          # Use yq to add the new application configuration
          yq eval ".applications.$APP_NAME = {\"project\": \"default\", \"source\": {\"path\": \"environments/$ENV/applications/${{ needs.extract_info.outputs.application-name }}\"}, \"destination\": {\"namespace\": \"$NAMESPACE\"}}" -i environments/$ENV/configuration/values.yaml

      - name: Commit changes
        env:
          NAME: ${{ needs.extract_info.outputs.application-name }}
          ENV: ${{ needs.extract_info.outputs.environment }}
        run: |
          git config --global user.email "unir-tfm-devops[bot]@users.noreply.github.com"
          git config --global user.name "unir-tfm-devops[bot]"
          git remote set-url origin https://x-access-token:${{ steps.get_token.outputs.token }}@github.com/${{ github.repository }}
          git checkout -b feature/new-application-${{ env.NAME }}-${{ env.ENV }}
          git add environments/${{ env.ENV }}/configuration/values.yaml
          git commit -m "Add ${{ needs.extract_info.outputs.application-name }} ArgoCD app to ${{ env.ENV }} environment"
          git push origin feature/new-application-${{ env.NAME }}-${{ env.ENV }}

  app-config-changes:
    name: Application Config Changes
    needs: [argo-changes, extract_info]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.UNIR_TFM_APP_ID }}
          private-key: ${{ secrets.UNIR_TFM_APP_PRIVATE_KEY }}
          repositories: "eks-workloads"

      - name: Create Application Chart.yaml
        run: |
          # Create the application directory
          mkdir -p environments/${{ needs.extract_info.outputs.environment }}/applications/${{ needs.extract_info.outputs.application-name }}

          # Create Chart.yaml
          cat > environments/${{ needs.extract_info.outputs.environment }}/applications/${{ needs.extract_info.outputs.application-name }}/Chart.yaml << EOF
          apiVersion: v2
          name: ${{ needs.extract_info.outputs.application-name }}
          version: 1.0.0
          description: Helm chart for ${{ needs.extract_info.outputs.application-name }} deployment
          dependencies:
            - name: ${{ needs.extract_info.outputs.helm-chart-name }}
              version: ${{ needs.extract_info.outputs.app-version }}
              repository: "http://3.238.99.68"
          EOF

      - name: Create Application values.yaml
        run: |
          # Clone the original repository to get the values.yaml
          git clone https://x-access-token:${{ steps.get_token.outputs.token }}@github.com/unir-tfm-devops/${{ needs.extract_info.outputs.repository-name }}.git temp-repo
          cd temp-repo

          # Copy the values.yaml from the helm-chart-path and wrap it under the app name
          if [ -f ".${{ needs.extract_info.outputs.helm-path }}/values.yaml" ]; then
            # Use yq to create a new values.yaml with the app name as root key containing the original content
            yq eval ".${{ needs.extract_info.outputs.application-name }} = load(\".${{ needs.extract_info.outputs.helm-path }}/values.yaml\")" -n > ../environments/${{ needs.extract_info.outputs.environment }}/applications/${{ needs.extract_info.outputs.application-name }}/values.yaml
            echo "Successfully copied and wrapped values.yaml from ${{ needs.extract_info.outputs.helm-path }}"
          else
            echo "Error: values.yaml not found at .${{ needs.extract_info.outputs.helm-path }}/values.yaml"
            exit 1
          fi

          # Clean up
          cd ..
          rm -rf temp-repo

      - name: Commit Application Config Changes
        env:
          NAME: ${{ needs.extract_info.outputs.application-name }}
          ENV: ${{ needs.extract_info.outputs.environment }}
        run: |
          git config --global user.email "unir-tfm-devops[bot]@users.noreply.github.com"
          git config --global user.name "unir-tfm-devops[bot]"
          git remote set-url origin https://x-access-token:${{ steps.get_token.outputs.token }}@github.com/${{ github.repository }}

          # Checkout the existing branch and pull latest changes
          git fetch origin
          git checkout feature/new-application-${{ env.NAME }}-${{ env.ENV }}
          git pull origin feature/new-application-${{ env.NAME }}-${{ env.ENV }}

          git add environments/${{ env.ENV }}/applications/${{ needs.extract_info.outputs.application-name }}/
          git commit -m "Add ${{ needs.extract_info.outputs.application-name }} application configuration for ${{ env.ENV }} environment"
          git push origin feature/new-application-${{ env.NAME }}-${{ env.ENV }}

  create-pr:
    name: Create PR
    needs: [app-config-changes, extract_info]
    runs-on: ubuntu-latest
    outputs:
      pr_url: ${{ env.PR_URL }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.UNIR_TFM_APP_ID }}
          private-key: ${{ secrets.UNIR_TFM_APP_PRIVATE_KEY }}
          repositories: "eks-workloads"

      - name: Create Pull Request
        id: create_pr
        env:
          NAME: ${{ needs.extract_info.outputs.application-name }}
          ENV: ${{ needs.extract_info.outputs.environment }}
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          PR_URL=$(gh pr create \
            -B main \
            -H feature/new-application-${{ env.NAME }}-${{ env.ENV }} \
            -t "Add new application to ${{ env.ENV }} environment: ${{ env.NAME }}" \
            -b "### Summary
            This PR adds a new application as requested in [Issue #${{ env.ISSUE_NUMBER }}](${{ env.ISSUE_URL }}).

            **Application Name:** ${{ env.NAME }}
            **Environment:** ${{ env.ENV }}

            ### Changes Made
            - Added ArgoCD application configuration to ${{ env.ENV }} environment
            - Created application Chart.yaml with dependencies
            - Created application values.yaml from source repository

            ### Checklist
            - [ ] Verify application name and configuration
            - [ ] Confirm Helm chart dependencies are correct
            - [ ] Validate ArgoCD application syntax
            - [ ] Merge once validated

            Closes #${{ env.ISSUE_NUMBER }}")

          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

  rds-changes:
    name: RDS Changes
    needs: [extract_info]
    runs-on: ubuntu-latest
    steps:
      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.UNIR_TFM_APP_ID }}
          private-key: ${{ secrets.UNIR_TFM_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.get_token.outputs.token }}
          repository: ${{ github.repository_owner }}/infra-rds
          path: infra-rds

      - name: Add new DB to environment
        working-directory: infra-rds
        env:
          NAME: ${{ needs.extract_info.outputs.application-name }}
          ENV: ${{ needs.extract_info.outputs.environment }}
        run: |
          # Add new Database module to databases-$ENV.tf
          cat <<EOF >> databases-${{ env.ENV }}.tf

          module "${{ env.NAME }}-${{ env.ENV }}" {
            source = "./modules/database"

            database_name = "${{ env.NAME }}-${{ env.ENV }}"
            username      = "${{ env.NAME }}-${{ env.ENV }}"
            password      = "${{ env.NAME }}-${{ env.ENV }}"

            depends_on = [time_sleep.wait_for_rds]

            providers = {
              postgresql = postgresql.${{ env.ENV }}
            }
          }
          EOF

      - name: Commit RDS database changes
        working-directory: infra-rds
        env:
          NAME: ${{ needs.extract_info.outputs.application-name }}
          ENV: ${{ needs.extract_info.outputs.environment }}
        run: |
          git config --global user.email "unir-tfm-devops[bot]@users.noreply.github.com"
          git config --global user.name "unir-tfm-devops[bot]"
          git remote set-url origin https://x-access-token:${{ steps.get_token.outputs.token }}@github.com/${{ github.repository_owner }}/infra-rds
          git checkout -b feature/new-${{ env.ENV }}-db-${{ env.NAME }}
          git add databases-${{ env.ENV }}.tf
          git commit -m "Add new DB for ${{ env.NAME }} in ${{ env.ENV }} environment"
          git push origin feature/new-${{ env.ENV }}-db-${{ env.NAME }}

  create-rds-pr:
    name: Create RDS PR
    needs: [rds-changes, extract_info]
    runs-on: ubuntu-latest
    outputs:
      pr_url: ${{ env.PR_URL }}
    steps:
      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.UNIR_TFM_APP_ID }}
          private-key: ${{ secrets.UNIR_TFM_APP_PRIVATE_KEY }}
          repositories: "infra-rds"

      - name: Checkout infra-rds Repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.get_token.outputs.token }}
          repository: ${{ github.repository_owner }}/infra-rds

      - name: Create Pull Request
        id: create_pr
        env:
          NAME: ${{ needs.extract_info.outputs.application-name }}
          ENV: ${{ needs.extract_info.outputs.environment }}
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          PR_URL=$(gh pr create \
            -B main \
            -H feature/new-${{ env.ENV }}-db-${{ env.NAME }} \
            -t "Add new database for ${{ env.NAME }} in ${{ env.ENV }} environment" \
            -b "### Summary
            This PR adds a new database as requested in [Issue #${{ env.ISSUE_NUMBER }}](${{ env.ISSUE_URL }}).

            **Application Name:** ${{ env.NAME }}
            **Environment:** ${{ env.ENV }}
            **Database Name:** ${{ env.NAME }}-${{ env.ENV }}

            ### Changes Made
            - Added new database module configuration for ${{ env.ENV }} environment
            - Database name: ${{ env.NAME }}-${{ env.ENV }}
            - Username: ${{ env.NAME }}-${{ env.ENV }}

            ### Checklist
            - [ ] Verify database name and configuration
            - [ ] Confirm database credentials are correct
            - [ ] Validate Terraform syntax
            - [ ] Merge once validated

            Closes #${{ env.ISSUE_NUMBER }}")

          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

  comment-on-issue:
    name: Comment on Issue
    needs: [create-pr, create-rds-pr, extract_info]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.UNIR_TFM_APP_ID }}
          private-key: ${{ secrets.UNIR_TFM_APP_PRIVATE_KEY }}
          repositories: "eks-workloads"

      - name: Comment on Issue
        env:
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          PR_URL: ${{ needs.create-pr.outputs.pr_url }}
          RDS_PR_URL: ${{ needs.create-rds-pr.outputs.pr_url }}
          ENV: ${{ needs.extract_info.outputs.environment }}
        run: |
          gh issue comment ${{ env.ISSUE_NUMBER }} --body "✅ Pull requests have been created to address this issue:

          ## ${{ env.ENV }} Environment PRs

          ### 1. Database PR (Must be merged FIRST!)
          **PR:** ${{ env.RDS_PR_URL }}

          **Changes Made:**
          - Added new database module configuration for ${{ env.ENV }} environment
          - Database name: ${{ needs.extract_info.outputs.application-name }}-${{ env.ENV }}
          - Username: ${{ needs.extract_info.outputs.application-name }}-${{ env.ENV }}

          ### 2. ArgoCD Application PR (Merge AFTER database PR)
          **PR:** ${{ env.PR_URL }}

          **Changes Made:**
          - Added ArgoCD application configuration to ${{ env.ENV }} environment
          - Created application Chart.yaml with dependencies
          - Created application values.yaml from source repository

          ### ⚠️ Important Merge Order
          1. **Review and merge the ${{ env.ENV }} database PR first**
          2. **Wait for database creation to complete**
          3. **Then review and merge the ${{ env.ENV }} ArgoCD application PR**

          ### Summary
          - **${{ env.ENV }} Database PR:** ${{ env.RDS_PR_URL }}
          - **${{ env.ENV }} ArgoCD Application PR:** ${{ env.PR_URL }}

          Please follow the merge order to ensure the database is ready before deploying the application."
